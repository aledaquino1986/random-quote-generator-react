{"version":3,"sources":["components/ui/quote/Quote.js","components/ui/author/Author.js","components/ui/button/Button.js","components/ui/spinner/Spinner.js","components/main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Quote","quote","className","Author","author","Button","content","onClick","Spinner","Main","useState","quotes","setQuotes","isLoading","setIsLoading","text","newQuote","setNewQuote","useEffect","a","fetch","response","json","data","retrieveQuote","console","log","fetchInfo","Math","floor","random","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWAYeA,EATD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,sBAAKC,UAAU,uBAAf,UACE,mBAAGA,UAAU,sBACb,sBAAMA,UAAU,8BAAhB,SAA+CD,QCItCE,G,MARA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,qBAAKF,UAAU,yBAAf,SACE,sBAAMA,UAAU,iCAAhB,SAAkDE,QCKzCC,G,MARA,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCJ,iBAAyC,MAA7B,GAA6B,MAAzBK,eAAyB,MAAf,aAAe,EAClE,OACE,wBAAQL,UAAS,iBAAYA,EAAZ,KAA0BK,QAASA,EAApD,SACGD,MCCQE,G,MAJC,WACd,OAAO,qBAAKN,UAAU,aC+DTO,G,MA3DF,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACVC,EADU,KACFC,EADE,OAEiBF,oBAAS,GAF1B,mBAEVG,EAFU,KAECC,EAFD,OAGeJ,mBAAS,CACvCK,KAAM,GACNX,OAAQ,KALO,mBAGVY,EAHU,KAGAC,EAHA,KAQjBC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,4DACiB,8BADjB,kBAI2BC,MAHV,+BADjB,cAIUC,EAJV,gBAKuBA,EAASC,OALhC,OAKUC,EALV,OAOIX,EAAUW,GAEVC,EAAcD,GAEdT,GAAa,GAXjB,kDAaIW,QAAQC,IAAR,MAbJ,2DADc,uBAAC,WAAD,wBAkBdC,KACC,IAEH,IAAMH,EAAgB,SAAAb,GAAW,IAAD,EACLA,EAAOiB,KAAKC,MAAMD,KAAKE,SAAWnB,EAAOoB,SAA1DhB,EADsB,EACtBA,KAAMX,EADgB,EAChBA,OAEda,EAAY,CACVF,KAAMA,EACNX,OAAQA,KAIZ,OACE,sBAAMF,UAAU,kBAAhB,SACGW,EACC,cAAC,EAAD,IAEA,qCACE,cAAC,EAAD,CAAOZ,MAAOe,EAASD,OACvB,cAAC,EAAD,CAAQX,OAAQY,EAASZ,SACzB,sBAAKF,UAAU,mBAAf,UACE,cAAC,EAAD,CACEI,QAAS,mBAAGJ,UAAU,mBACtBA,UAAU,mBAEZ,cAAC,EAAD,CAAQI,QAAQ,YAAYC,QAAS,kBAAMiB,EAAcb,gBChDtDqB,MARf,WACE,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6362615b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./quote.css\";\r\n\r\nconst Quote = ({ quote }) => {\r\n  return (\r\n    <div className=\"quote-text-container\">\r\n      <i className=\"fas fa-quote-left\"></i>\r\n      <span className=\"quote-text-container__quote\">{quote}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import React from \"react\";\r\nimport \"./author.css\";\r\n\r\nconst Author = ({ author }) => {\r\n  return (\r\n    <div className=\"quote-author-container\">\r\n      <span className=\"quote-author-container__author\">{author}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Author;\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = ({ content, className = \"\", onClick = () => {} }) => {\r\n  return (\r\n    <button className={`button ${className} `} onClick={onClick}>\r\n      {content}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./spinner.css\";\r\n\r\nconst Spinner = () => {\r\n  return <div className=\"loader\"></div>;\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Quote from \"../ui/quote/Quote\";\r\nimport Author from \"../ui/author/Author\";\r\nimport Button from \"../ui/button/Button\";\r\nimport Spinner from \"../ui/spinner/Spinner\";\r\n\r\nimport \"./main.css\";\r\n\r\nconst Main = () => {\r\n  const [quotes, setQuotes] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [newQuote, setNewQuote] = useState({\r\n    text: \"\",\r\n    author: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function fetchInfo() {\r\n      const apiUrl = \"https://type.fit/api/quotes\";\r\n\r\n      try {\r\n        const response = await fetch(apiUrl);\r\n        const data = await response.json();\r\n\r\n        setQuotes(data);\r\n\r\n        retrieveQuote(data);\r\n\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n    fetchInfo();\r\n  }, []);\r\n\r\n  const retrieveQuote = quotes => {\r\n    const { text, author } = quotes[Math.floor(Math.random() * quotes.length)];\r\n\r\n    setNewQuote({\r\n      text: text,\r\n      author: author\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"quote-container\">\r\n      {isLoading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <>\r\n          <Quote quote={newQuote.text} />\r\n          <Author author={newQuote.author} />\r\n          <div className=\"button-container\">\r\n            <Button\r\n              content={<i className=\"fab fa-twitter\"></i>}\r\n              className=\"button-twitter\"\r\n            />\r\n            <Button content=\"New Quote\" onClick={() => retrieveQuote(quotes)} />\r\n          </div>\r\n        </>\r\n      )}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import \"./App.css\";\nimport Main from \"./components/main/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}